package GUI;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

public class HelpPanel extends javax.swing.JPanel {
    
    String textToShow;
	BufferedImage backgroundImage;
	String imageBuffer = "/images/help.jpg";
    /**
     * Creates new form HelpPanel
     */
    public HelpPanel() {
		this.setPreferredSize(new Dimension(832,776));
	     try {
	         backgroundImage = ImageIO.read(getClass().getResourceAsStream(imageBuffer));
	        } catch(IOException exc) {
	          exc.printStackTrace();
	        }
      initComponents();
  }
	protected void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(backgroundImage, 0, 0, null);
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        helpText = new javax.swing.JLabel();
        backBut = new javax.swing.JButton();
        controlBut = new javax.swing.JButton();
        goalBut = new javax.swing.JButton();

        helpText.setBackground(new java.awt.Color(0, 0, 0));
        helpText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        backBut.setText("Back");
        backBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButActionPerformed(evt);
            }
        });

        controlBut.setText("Control");
        controlBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlButActionPerformed(evt);
            }
        });

        goalBut.setText("Goal");
        goalBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goalButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(backBut)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(522, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(helpText, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(controlBut)
                        .addGap(73, 73, 73)
                        .addComponent(goalBut)
                        .addGap(68, 68, 68))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(controlBut)
                    .addComponent(goalBut))
                .addGap(18, 18, 18)
                .addComponent(helpText, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(backBut)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>                        

    private void backButActionPerformed(java.awt.event.ActionEvent evt) {                                        
    	this.hide();
    	GameFrame settingsTriggered = new GameFrame(new MainMenuPanel());
    }                                       

    private void controlButActionPerformed(java.awt.event.ActionEvent evt) {                                           
        textToShow = "<html>Use your mouse!</html>";
        helpText.setText(textToShow);
    }                                          

    private void goalButActionPerformed(java.awt.event.ActionEvent evt) {                                        
        textToShow =  "<html>Player will have 300 coins, and 50 health points at the beginning. Until the arrival of the first wave, and at the end of each wave the player must place the towers by choosing them from the shop appearing as a side menu at the bottom-right of the gameplay screen. The player can’t place any towers on the Brown path which enemies has to cross. Green areas are fine for the tower placement. Be careful of the boss units, which have specifically different attributes from any other enemy units. Check out the information panel for the tips to take down any type of units in game. Information panel describes what attributes the towers and the enemies have as quantity.</html>";
        helpText.setText(textToShow);
    }                                       


    // Variables declaration - do not modify                     
    private javax.swing.JButton backBut;
    private javax.swing.JButton controlBut;
    private javax.swing.JButton goalBut;
    private javax.swing.JLabel helpText;
    // End of variables declaration                   
}
