package GUI;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

public class InformationPanel extends javax.swing.JPanel {
    
    int selectedUnitType;
    int selectedSpecUnit;
    String unitLabel;
	BufferedImage backgroundImage;
	String imageBuffer = "/images/information.jpg";
    /**
     * Creates new form InfoPanel
     */
    public InformationPanel() {
        unitLabel = " ";
        selectedUnitType = 1;
        selectedSpecUnit = 0;
		this.setPreferredSize(new Dimension(832,776));
	     try {
	         backgroundImage = ImageIO.read(getClass().getResourceAsStream(imageBuffer));
	        } catch(IOException exc) {
	          exc.printStackTrace();
	        }
       initComponents();
   }
	protected void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(backgroundImage, 0, 0, null);
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        unitTypeComboBox = new javax.swing.JComboBox<>();
        backBut = new javax.swing.JButton();
        enemyComboBox = new javax.swing.JComboBox<>();
        towerComboBox = new javax.swing.JComboBox<>();
        unitLabelText = new javax.swing.JLabel();

        unitTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tower", "Enemy" }));
        unitTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitTypeComboBoxActionPerformed(evt);
            }
        });

        backBut.setText("Back");
        backBut.addActionListener(new java.awt.event.ActionListener(){
        	public void actionPerformed(java.awt.event.ActionEvent evt){
        		backButActionPerformed(evt);
        	}
        });
        enemyComboBox.setMaximumRowCount(11);
        enemyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Battering Ram", "Catapult", "Chengiz Khan Rider", "Elephant Rider", "Footman", "Jester", "Knight", "Light Cavaltry", "Pope", "Saint John's Knight", "Trojan Horse" }));
        enemyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyComboBoxActionPerformed(evt);
            }
        });

        towerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arcane Tower", "Arrow Tower", "Balista Tower", "Cannon Tower", "Ice Tower", "Mortar Tower", "Oil Tower", "Poison Tower" }));
        towerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                towerComboBoxActionPerformed(evt);
            }
        });

        unitLabelText.setBackground(new java.awt.Color(0, 0, 0));
        unitLabelText.setForeground(new java.awt.Color(0, 0, 0));
        unitLabelText.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        unitLabelText.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(backBut)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(467, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(unitLabelText, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(unitTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(enemyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                            .addComponent(towerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(unitTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(towerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(unitLabelText, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(backBut)
                .addGap(89, 89, 89))
        );
    }// </editor-fold>                        
    private void backButActionPerformed(java.awt.event.ActionEvent evt) {                                        
    	this.hide();
    	GameFrame settingsTriggered = new GameFrame(new MainMenuPanel());
    }   
    private void unitTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
            selectedUnitType = unitTypeComboBox.getSelectedIndex();
            if(selectedUnitType == 0){
                enemyComboBox.setVisible(false);
                towerComboBox.setVisible(true);
            }
            if(selectedUnitType == 1){
                enemyComboBox.setVisible(true);
                towerComboBox.setVisible(false);
            }
    }                                                

    private void enemyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
            selectedSpecUnit = enemyComboBox.getSelectedIndex();
            if(selectedSpecUnit == 0){ //Battering ram
                unitLabel = "<html>A tanky boss unit which has low speed, and great health&armor attributes. Ballista towers may counter it sufficiently.</html>"; 
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 1){ //Catapult
                unitLabel = "<html>Unit with low speed, and mediocre health and armor. Slow speed makes it vulnerable to towers that have fast fire rate.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 2){ // ChengizKhanRider
                unitLabel = "<html>Boss unit with high speed, and very high health. Has mediocre armor, most vulnerable to speed debuffs.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 3){ // Elephant Rider
                unitLabel = "<html>High health and medium armor levels make this unit resistant to many various towers. Ballista towers, and mortar towers should be considered to handle them.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 4){ //Footman
               unitLabel = "<html>Default unit type with low attributes. Has a mediocre speed, and can be easily taken down with arrow towers.</html>";
               unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 5){ // Jester
                unitLabel = "<html>Has the highest speed attribute in game,\n and mediocre amount of health&armor points.\n ice towers are suggested.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 6){ // Knight
                unitLabel = "<html>These units have medium health, and low speed. However, armor attribute is quite great. Arcane towers will be useful to deal with knights.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 7){ //Light Cavalry
                unitLabel = "<html>Considerably faster than most of the units, but and health is in low level. Can be countered with ice towers.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 8){ // Pope
                unitLabel = "<html>Last boss unit to be appeared. Beholding largest health bar as well as large armor attributes, and medium speed, this unit will be quite a challenge. Throw everything you can!</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 9){ // SaitnJohn'sKnights
                unitLabel = "<html>The boss unit with highest armor, and considerably high health points. Has low speed, and single targeting towers may be advantageous.</html>";
                unitLabelText.setText(unitLabel);
            }
            if(selectedSpecUnit == 10){ // Trojan Horse
                unitLabel = "<html>Health and armor values of this unit boss are tremendous. Speed is low on the other hand. Should be taken down easy with towers that can take out single targets easily.</html>";
                unitLabelText.setText(unitLabel);
            }
    }                                             

    private void towerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
        selectedSpecUnit = towerComboBox.getSelectedIndex();
        if(selectedSpecUnit == 0){ //Arcane
            unitLabel = "<html>Main purpose this tower is debuffing the armor values of the targets. It has less attack units, high range, and medium attack frequency just like ice tower.</html>"; 
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 1){ //Arrow
            unitLabel = "<html>The most basic and cheapest of all towers. Targeting is single, attack frequency is medium, and attack points are considerably low. Can be used to takeout basic units such as cavalry, and footman.</html>";
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 2){ // Balista
            unitLabel = "<html>The strongest attack point value that tower can have in the game. Range is also considerably high, yet it cost of attack frequency. Can be useful against boss units.</html>";
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 3){ // Cannon
            unitLabel = "<html>Can throw projectiles which cause medium attack point and splash damage. Range is high, and frequency is low. Can be used for controlling large hordes.</html>";
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 4){ //Ice
           unitLabel = "<html>This tower can be used to cause speed debuff to the targets. It has medium attack range and frequency, yet it lacks sufficient attack points.</html>";
           unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 5){ // Mortar
            unitLabel = "<html>It aims on single target with medium mediocre attack points, and has high range. It has low attack frequency. Most preferable as an economic choice against big tanky units</html>";
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 6){ // Oil
            unitLabel = "<html>Causes high area damage with tremendous attack points. Should be advantageous enough against slow units. Yet range is the lowest of all, and so the attack frequency.</html>";
            unitLabelText.setText(unitLabel);
        }
        if(selectedSpecUnit == 7){ //Poison
            unitLabel = "<html>Causes bleed damage on targets. Has mediocre attack points, medium range, and high attack frequency.</html>";
            unitLabelText.setText(unitLabel);
        }

    }                                             


    // Variables declaration - do not modify                     
    private javax.swing.JButton backBut;
    private javax.swing.JComboBox<String> enemyComboBox;
    private javax.swing.JComboBox<String> towerComboBox;
    private javax.swing.JLabel unitLabelText;
    private javax.swing.JComboBox<String> unitTypeComboBox;
    // End of variables declaration                   
}
